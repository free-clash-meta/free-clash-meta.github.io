<!DOCTYPE html>
<html xml:lang="zh-CN" lang="zh-CN">

<head>
        <link rel="canonical" href="https://free-clash-meta.github.io/news/article-93379.htm" />
    <title>pandas apply() 函数用法</title>
        <meta name="description" content="理解 pandas 的函数，要对函数式编程有一定的概念和理解。函数式编程，包括函数式编程思维，当然是一个很复杂的话题，但对今天介绍的 apply() 函数，只需要理解：函数作为一个对象，能作为参数传递" />
        <link rel="icon" href="/assets/website/img/free_clash_meta/favicon.ico" type="image/x-icon"/>
    <meta content="text/html;charset=utf-8" http-equiv="Content-Type">
    <meta content="width=device-width, initial-scale=1.0" name="viewport">

    <meta name="author" content="Free Clash Meta免费节点机场官网">
    <meta property="og:type" content="article" />
    <meta property="og:url" content="https://free-clash-meta.github.io/news/article-93379.htm" />
    <meta property="og:site_name" content="Free Clash Meta免费节点机场官网" />
    <meta property="og:title" content="pandas apply() 函数用法" />
    <meta property="og:image" content="https://free-clash-meta.github.io/uploads/20250201-2/ef6beb85f8aa555240c8856c602818b7.webp" />
        <meta property="og:release_date" content="2025-04-11T08:57:21" />
    <meta property="og:updated_time" content="2025-04-11T08:57:21" />
        <meta property="og:description" content="理解 pandas 的函数，要对函数式编程有一定的概念和理解。函数式编程，包括函数式编程思维，当然是一个很复杂的话题，但对今天介绍的 apply() 函数，只需要理解：函数作为一个对象，能作为参数传递" />
    
    <meta name="applicable-device" content="pc,mobile" />
    <meta name="renderer" content="webkit" />
    <meta name="force-rendering" content="webkit" />
    <meta http-equiv="Cache-Control" content="no-transform" />
    <meta name="robots" content="max-image-preview:large" />
    <meta name="apple-mobile-web-app-capable" content="yes">
    <meta name="apple-mobile-web-app-status-bar-style" content="black">
    <meta name="apple-mobile-web-app-title" content="pandas apply() 函数用法">
    <meta name="format-detection" content="telephone=no">

    <link rel="dns-prefetch" href="https:/www.googletagmanager.com">
    <link rel="dns-prefetch" href="https://www.googleadservices.com">
    <link rel="dns-prefetch" href="https://www.google-analytics.com">
    <link rel="dns-prefetch" href="https://pagead2.googlesyndication.com">
    <link rel="dns-prefetch" href="https://cm.g.doubleclick.net">

    <!-- CSS Files
    ================================================== -->
    <link href="/assets/website/css/free_clash_meta/bootstrap.min.css" rel="stylesheet" type="text/css" id="bootstrap">
    <link href="/assets/website/css/free_clash_meta/plugins.css" rel="stylesheet" type="text/css">
    <link href="/assets/website/css/free_clash_meta/swiper.css" rel="stylesheet" type="text/css">
    <link href="/assets/website/css/free_clash_meta/style.css" rel="stylesheet" type="text/css">
    <link href="/assets/website/css/free_clash_meta/coloring.css" rel="stylesheet" type="text/css">
    <!-- color scheme -->
    <link id="colors" href="/assets/website/css/free_clash_meta/scheme-01.css" rel="stylesheet" type="text/css">
    <!-- Google tag (gtag.js) -->
<script async src="https://www.googletagmanager.com/gtag/js?id=G-8MB0F69N3T"></script>
<script>
  window.dataLayer = window.dataLayer || [];
  function gtag(){dataLayer.push(arguments);}
  gtag('js', new Date());

  gtag('config', 'G-8MB0F69N3T');
</script>
    <script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-3332997411212854"
     crossorigin="anonymous"></script>
    
</head>

<body data-page="detail">
    <div id="wrapper">
                <!-- page preloader begin -->
        <div id="de-loader"></div>
        <!-- page preloader close -->
        <!-- header begin -->
        <header class="transparent header-light has-topbar">
            <div class="container">
                <div class="row">
                    <div class="col-md-12">
                        <div class="de-flex sm-pt10">
                            <div class="de-flex-col">
                                <!-- logo begin -->
                                <div id="logo">
                                    <a href="/" class="xcblog-blog-logo">
                                                                                <span class="text-primary m-0">Free Clash Meta</span>
                                                                            </a>
                                </div>
                                <!-- logo close -->
                            </div>
                            <div class="de-flex-col header-col-mid">
                                <ul id="mainmenu">
                                                                        <li><a class="menu-item" href="/">首页</a></li>
                                                                        <li><a class="menu-item" href="/free-nodes/">免费节点</a></li>
                                                                        <li><a class="menu-item" href="/paid-subscribe/">推荐机场</a></li>
                                                                        <li><a class="menu-item" href="/client.htm">客户端</a></li>
                                                                        <li><a class="menu-item" href="/news/">新闻资讯</a></li>
                                                                    </ul>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </header>
        <!-- header close -->
        <!-- content begin -->
        <div id="content" class="no-top no-bottom">
            <div id="top"></div>
            <!-- section begin -->
            <section id="de-subheader" class="mt-sm-60 pt20 pb20 bg-gradient-45-deg text-light">
                <div class="container relative z-index-1000">
                    <div class="row align-items-center">
                        <div class="col-lg-6">
                            <h1 class="mb-0" style="font-size: 2.5rem;">pandas apply() 函数用法</h1>
                        </div>
                        <div class="col-lg-6 text-lg-end">
                            <ul class="crumb">
                                <li><a href="/">首页</a></li>
                                <li><a href="/news/">新闻资讯</a></li>
                                <li class="active">正文</li>
                            </ul>
                        </div>
                    </div>
                </div>
            </section>
            <!-- section close -->
            <section>
                <div class="container relative">
                    <div class="row">
                        <div class="col-md-9">
                                            <input type="hidden" id="share-website-info" data-name="Clash Meta免费节点订阅站" data-url="https://clash-meta.github.io">
                  				  				  				<div id="content_views" class="markdown_views prism-atom-one-light"> <p>理解 pandas 的函数，要对函数式编程有一定的概念和理解。函数式编程，包括函数式编程思维，当然是一个很复杂的话题，但对今天介绍的 <code>apply()</code> 函数，只需要理解：<strong>函数作为一个对象，能作为参数传递给其它函数</strong>，也能作为函数的返回值。</p> <p>函数作为对象能带来代码风格的巨大改变。举一个例子，有一个类型为 list 的变量，包含 从 1 到 10 的数据，需要从其中找出能被 3 整除的所有数字。用传统的方法：</p> <pre><code class="prism language-python"><span class="token keyword">def</span> <span class="token function">can_divide_by_three</span><span class="token punctuation">(</span>number<span class="token punctuation">)</span><span class="token punctuation">:</span>     <span class="token keyword">if</span> number <span class="token operator">%</span> <span class="token number">3</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>         <span class="token keyword">return</span> <span class="token boolean">True</span>     <span class="token keyword">else</span><span class="token punctuation">:</span>         <span class="token keyword">return</span> <span class="token boolean">False</span>  selected_numbers <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token keyword">for</span> number <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">11</span><span class="token punctuation">)</span><span class="token punctuation">:</span>     <span class="token keyword">if</span> can_divide_by_three<span class="token punctuation">(</span>number<span class="token punctuation">)</span><span class="token punctuation">:</span>         selected_numbers<span class="token punctuation">.</span>append<span class="token punctuation">(</span>number<span class="token punctuation">)</span> </code></pre> <p>循环是不可少的，因为 <code>can_divide_by_three()</code> 函数只用一次，考虑用 lambda 表达式简化：</p> <pre><code class="prism language-python">divide_by_three <span class="token operator">=</span> <span class="token keyword">lambda</span> x <span class="token punctuation">:</span> <span class="token boolean">True</span> <span class="token keyword">if</span> x <span class="token operator">%</span> <span class="token number">3</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token keyword">else</span> <span class="token boolean">False</span>  selected_numbers <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token keyword">for</span> number <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">11</span><span class="token punctuation">)</span><span class="token punctuation">:</span>     <span class="token keyword">if</span> divide_by_three<span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">:</span>         selected_numbers<span class="token punctuation">.</span>append<span class="token punctuation">(</span>item<span class="token punctuation">)</span> </code></pre> <p>以上是传统编程思维方式，而函数式编程思维则完全不同。我们可以这样想：从 list 中取出<strong>特定规则</strong>的数字，能不能只关注和设置规则，循环这种事情交给编程语言去处理呢？当然可以。当编程人员只关心规则（规则可能是一个条件，或者由某一个 function 来定义），代码将大大简化，可读性也更强。</p> <p>Python 语言提供 <code>filter()</code> 函数，语法如下：</p> <pre><code class="prism language-python"><span class="token builtin">filter</span><span class="token punctuation">(</span>function<span class="token punctuation">,</span> sequence<span class="token punctuation">)</span> </code></pre> <p><code>filter()</code> 函数的功能：对 sequence 中的 item <strong>依次</strong>执行 function(item)，将结果为 True 的 item 组成一个 List/String/Tuple（取决于 sequence 的类型）并返回。有了这个函数，上面的代码可以简化为：</p> <pre><code class="prism language-python">divide_by_three <span class="token operator">=</span> <span class="token keyword">lambda</span> x <span class="token punctuation">:</span> <span class="token boolean">True</span> <span class="token keyword">if</span> x <span class="token operator">%</span> <span class="token number">3</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token keyword">else</span> <span class="token boolean">False</span> selected_numbers <span class="token operator">=</span> <span class="token builtin">filter</span><span class="token punctuation">(</span>divide_by_three<span class="token punctuation">,</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">11</span><span class="token punctuation">)</span><span class="token punctuation">)</span> </code></pre> <p>将 lambda 表达式放在语句中，代码简化到只需要一句话就够了：</p> <pre><code class="prism language-python">selected_numbers <span class="token operator">=</span> <span class="token builtin">filter</span><span class="token punctuation">(</span><span class="token keyword">lambda</span> x<span class="token punctuation">:</span> x <span class="token operator">%</span> <span class="token number">3</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">11</span><span class="token punctuation">)</span><span class="token punctuation">)</span> </code></pre> <h2> <a id="Seriesapply_48" rel="nofollow"></a>Series.apply()</h2> <p>回到主题， pandas 的 <code>apply()</code> 函数可以作用于 <code>Series</code> 或者整个 <code>DataFrame</code>，功能也是自动遍历整个 <code>Series</code> 或者 <code>DataFrame</code>, 对每一个元素运行指定的函数。</p> <p>举一个例子，现在有这样一组数据，学生的考试成绩：</p> <pre><code>  Name Nationality  Score    张           汉    400    李           回    450    王           汉    460 </code></pre> <p>如果民族不是汉族，则总分在考试分数上再加 5 分，现在需要用 pandas 来做这种计算，我们在 Dataframe 中增加一列。当然如果只是为了得到结果， <code>numpy.where()</code> 函数更简单，这里主要为了演示 <code>Series.apply()</code> 函数的用法。</p> <pre><code class="prism language-python"><span class="token keyword">import</span> pandas <span class="token keyword">as</span> pd  df <span class="token operator">=</span> pd<span class="token punctuation">.</span>read_csv<span class="token punctuation">(</span><span class="token string">"studuent-score.csv"</span><span class="token punctuation">)</span> df<span class="token punctuation">[</span><span class="token string">'ExtraScore'</span><span class="token punctuation">]</span> <span class="token operator">=</span> df<span class="token punctuation">[</span><span class="token string">'Nationality'</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token builtin">apply</span><span class="token punctuation">(</span><span class="token keyword">lambda</span> x <span class="token punctuation">:</span> <span class="token number">5</span> <span class="token keyword">if</span> x <span class="token operator">!=</span> <span class="token string">'汉'</span> <span class="token keyword">else</span> <span class="token number">0</span><span class="token punctuation">)</span> df<span class="token punctuation">[</span><span class="token string">'TotalScore'</span><span class="token punctuation">]</span> <span class="token operator">=</span> df<span class="token punctuation">[</span><span class="token string">'Score'</span><span class="token punctuation">]</span> <span class="token operator">+</span> df<span class="token punctuation">[</span><span class="token string">'ExtraScore'</span><span class="token punctuation">]</span> </code></pre> <p>对于 Nationality 这一列， pandas 遍历每一个值，并且对这个值执行 lambda 匿名函数，将计算结果存储在一个新的 <code>Series</code> 中返回。上面代码在 jupyter notebook 中显示的结果如下：</p> <pre><code>  Name Nationality  Score  ExtraScore  TotalScore 0    张           汉    400           0         400 1    李           回    450           5         455 2    王           汉    460           0         460 </code></pre> <p><code>apply()</code> 函数当然也可执行 python 内置的函数，比如我们想得到 Name 这一列字符的个数，如果用 <code>apply()</code> 的话：</p> <pre><code class="prism language-python">df<span class="token punctuation">[</span><span class="token string">'NameLength'</span><span class="token punctuation">]</span> <span class="token operator">=</span> df<span class="token punctuation">[</span><span class="token string">'Name'</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token builtin">apply</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">)</span> </code></pre> <h2> <a id="apply__85" rel="nofollow"></a>apply 函数接收带有参数的函数</h2> <p>根据 pandas 帮助文档 <a href="http://www.m6000.cn/wp-content/themes/begin%20lts/inc/go.php?url=https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.Series.apply.html"  rel="nofollow">pandas.Series.apply — pandas 1.3.1 documentation</a>，该函数可以接收位置参数或者关键字参数，语法如下：</p> <pre><code class="prism language-python">Series<span class="token punctuation">.</span><span class="token builtin">apply</span><span class="token punctuation">(</span>func<span class="token punctuation">,</span> convert_dtype<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span> args<span class="token operator">=</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span> </code></pre> <p>对于 func 参数来说，该函数定义中的第一个参数是必须的，所以 funct() <strong>除第一个参数之外的其它参数则被视为额外的参数，作为参数来传递</strong>。我们仍以刚才的示例进行说明，假设除汉族外，其他少数名族有加分，我们把加分放在函数的参数中，先定义一个 add_extra() 函数：</p> <pre><code class="prism language-python"><span class="token keyword">def</span> <span class="token function">add_extra</span><span class="token punctuation">(</span>nationality<span class="token punctuation">,</span> extra<span class="token punctuation">)</span><span class="token punctuation">:</span>     <span class="token keyword">if</span> nationality <span class="token operator">!=</span> <span class="token string">"汉"</span><span class="token punctuation">:</span>         <span class="token keyword">return</span> extra     <span class="token keyword">else</span><span class="token punctuation">:</span>         <span class="token keyword">return</span> <span class="token number">0</span> </code></pre> <p>对 df 新增一列：</p> <pre><code class="prism language-python">df<span class="token punctuation">[</span><span class="token string">'ExtraScore'</span><span class="token punctuation">]</span> <span class="token operator">=</span> df<span class="token punctuation">.</span>Nationality<span class="token punctuation">.</span><span class="token builtin">apply</span><span class="token punctuation">(</span>add_extra<span class="token punctuation">,</span> args<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token punctuation">)</span> </code></pre> <p>位置参数通过 args = () 来传递参数，类型为 tuple。也可用下面的方法调用：</p> <pre><code class="prism language-python">df<span class="token punctuation">[</span><span class="token string">'ExtraScore'</span><span class="token punctuation">]</span> <span class="token operator">=</span> df<span class="token punctuation">.</span>Nationality<span class="token punctuation">.</span><span class="token builtin">apply</span><span class="token punctuation">(</span>add_extra<span class="token punctuation">,</span> extra<span class="token operator">=</span><span class="token number">5</span><span class="token punctuation">)</span> </code></pre> <p>运行后结果为：</p> <pre><code>  Name Nationality  Score  ExtraScore 0    张           汉    400           0 1    李           回    450           5 2    王           汉    460           0 </code></pre> <p>将 add_extra 作为 lambda 函数：</p> <pre><code class="prism language-python">df<span class="token punctuation">[</span><span class="token string">'Extra'</span><span class="token punctuation">]</span> <span class="token operator">=</span> df<span class="token punctuation">.</span>Nationality<span class="token punctuation">.</span><span class="token builtin">apply</span><span class="token punctuation">(</span><span class="token keyword">lambda</span> n<span class="token punctuation">,</span> extra <span class="token punctuation">:</span> extra <span class="token keyword">if</span> n <span class="token operator">==</span> <span class="token string">'汉'</span> <span class="token keyword">else</span> <span class="token number">0</span><span class="token punctuation">,</span> args<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token punctuation">)</span> </code></pre> <p>下面继续讲解<strong>关键字参数</strong>。假设我们对不同的民族可以给不同的加分，定义 add_extra2() 函数：</p> <pre><code class="prism language-python"><span class="token keyword">def</span> <span class="token function">add_extra2</span><span class="token punctuation">(</span>nationaltiy<span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span><span class="token punctuation">:</span>     <span class="token keyword">return</span> kwargs<span class="token punctuation">[</span>nationaltiy<span class="token punctuation">]</span>         df<span class="token punctuation">[</span><span class="token string">'Extra'</span><span class="token punctuation">]</span> <span class="token operator">=</span> df<span class="token punctuation">.</span>Nationality<span class="token punctuation">.</span><span class="token builtin">apply</span><span class="token punctuation">(</span>add_extra2<span class="token punctuation">,</span> 汉<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span> 回<span class="token operator">=</span><span class="token number">10</span><span class="token punctuation">,</span> 藏<span class="token operator">=</span><span class="token number">5</span><span class="token punctuation">)</span> </code></pre> <p>运行结果为：</p> <pre><code>  Name Nationality  Score  Extra 0    张           汉    400      0 1    李           回    450     10 2    王           汉    460      0 </code></pre> <p>对照 apply 函数的语法，不难理解。</p> <h2> <a id="DataFrameapply_149" rel="nofollow"></a>DataFrame.apply()</h2> <p><code>DataFrame.apply()</code> 函数则会遍历每一个元素，对元素运行指定的 function。比如下面的示例：</p> <pre><code class="prism language-python"><span class="token keyword">import</span> pandas <span class="token keyword">as</span> pd <span class="token keyword">import</span> numpy <span class="token keyword">as</span> np  matrix <span class="token operator">=</span> <span class="token punctuation">[</span>     <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span>     <span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">,</span>     <span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">]</span> <span class="token punctuation">]</span>  df <span class="token operator">=</span> pd<span class="token punctuation">.</span>DataFrame<span class="token punctuation">(</span>matrix<span class="token punctuation">,</span> columns<span class="token operator">=</span><span class="token builtin">list</span><span class="token punctuation">(</span><span class="token string">'xyz'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> index<span class="token operator">=</span><span class="token builtin">list</span><span class="token punctuation">(</span><span class="token string">'abc'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> df<span class="token punctuation">.</span><span class="token builtin">apply</span><span class="token punctuation">(</span>np<span class="token punctuation">.</span>square<span class="token punctuation">)</span> </code></pre> <p>对 df 执行 <code>square()</code> 函数后，所有的元素都执行平方运算：</p> <pre><code>    x   y   z a   1   4   9 b  16  25  36 c  49  64  81 </code></pre> <p>如果只想 <code>apply()</code> 作用于指定的行和列，可以用行或者列的 <code>name</code> 属性进行限定。比如下面的示例将 x 列进行平方运算：</p> <pre><code class="prism language-python">df<span class="token punctuation">.</span><span class="token builtin">apply</span><span class="token punctuation">(</span><span class="token keyword">lambda</span> x <span class="token punctuation">:</span> np<span class="token punctuation">.</span>square<span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token keyword">if</span> x<span class="token punctuation">.</span>name<span class="token operator">==</span><span class="token string">'x'</span> <span class="token keyword">else</span> x<span class="token punctuation">)</span> </code></pre> <pre><code>    x  y  z a   1  2  3 b  16  5  6 c  49  8  9 </code></pre> <p>下面的示例对 x 和 y 列进行平方运算：</p> <pre><code class="prism language-python">df<span class="token punctuation">.</span><span class="token builtin">apply</span><span class="token punctuation">(</span><span class="token keyword">lambda</span> x <span class="token punctuation">:</span> np<span class="token punctuation">.</span>square<span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token keyword">if</span> x<span class="token punctuation">.</span>name <span class="token keyword">in</span> <span class="token punctuation">[</span><span class="token string">'x'</span><span class="token punctuation">,</span> <span class="token string">'y'</span><span class="token punctuation">]</span> <span class="token keyword">else</span> x<span class="token punctuation">)</span> </code></pre> <pre><code>    x   y  z a   1   4  3 b  16  25  6 c  49  64  9 </code></pre> <p>下面的示例对第一行 （a 标签所在行）进行平方运算：</p> <pre><code class="prism language-python">df<span class="token punctuation">.</span><span class="token builtin">apply</span><span class="token punctuation">(</span><span class="token keyword">lambda</span> x <span class="token punctuation">:</span> np<span class="token punctuation">.</span>square<span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token keyword">if</span> x<span class="token punctuation">.</span>name <span class="token operator">==</span> <span class="token string">'a'</span> <span class="token keyword">else</span> x<span class="token punctuation">,</span> axis<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span> </code></pre> <p>默认情况下 <code>axis=0</code> 表示按列，<code>axis=1</code> 表示按行。</p> <h2> <a id="apply__209" rel="nofollow"></a>apply() 计算日期相减示例</h2> <p>平时我们会经常用到日期的计算，比如要计算两个日期的间隔，比如下面的一组关于 wbs 起止日期的数据：</p> <pre><code>    wbs   date_from     date_to   job1  2019-04-01  2019-05-01   job2  2019-04-07  2019-05-17   job3  2019-05-16  2019-05-31   job4  2019-05-20  2019-06-11 </code></pre> <p>假定要计算起止日期间隔的天数。比较简单的方法就是两列相减（datetime 类型)：</p> <pre><code class="prism language-python"><span class="token keyword">import</span> pandas <span class="token keyword">as</span> pd <span class="token keyword">import</span> datetime <span class="token keyword">as</span> dt  wbs <span class="token operator">=</span> <span class="token punctuation">{<!-- --></span>     <span class="token string">"wbs"</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">"job1"</span><span class="token punctuation">,</span> <span class="token string">"job2"</span><span class="token punctuation">,</span> <span class="token string">"job3"</span><span class="token punctuation">,</span> <span class="token string">"job4"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>     <span class="token string">"date_from"</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">"2019-04-01"</span><span class="token punctuation">,</span> <span class="token string">"2019-04-07"</span><span class="token punctuation">,</span> <span class="token string">"2019-05-16"</span><span class="token punctuation">,</span><span class="token string">"2019-05-20"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>     <span class="token string">"date_to"</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">"2019-05-01"</span><span class="token punctuation">,</span> <span class="token string">"2019-05-17"</span><span class="token punctuation">,</span> <span class="token string">"2019-05-31"</span><span class="token punctuation">,</span> <span class="token string">"2019-06-11"</span><span class="token punctuation">]</span> <span class="token punctuation">}</span>  df <span class="token operator">=</span> pd<span class="token punctuation">.</span>DataFrame<span class="token punctuation">(</span>wbs<span class="token punctuation">)</span> df<span class="token punctuation">[</span><span class="token string">'elpased'</span><span class="token punctuation">]</span> <span class="token operator">=</span> df<span class="token punctuation">[</span><span class="token string">'date_to'</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token builtin">apply</span><span class="token punctuation">(</span>pd<span class="token punctuation">.</span>to_datetime<span class="token punctuation">)</span> <span class="token operator">-</span>                   df<span class="token punctuation">[</span><span class="token string">'date_from'</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token builtin">apply</span><span class="token punctuation">(</span>pd<span class="token punctuation">.</span>to_datetime<span class="token punctuation">)</span> </code></pre> <p><code>apply()</code> 函数将 <code>date_from</code> 和 <code>date_to</code> 两列转换成 datetime 类型。我们 print 一下 df:</p> <pre><code>    wbs   date_from     date_to elapsed 0  job1  2019-04-01  2019-05-01 30 days 1  job2  2019-04-07  2019-05-17 40 days 2  job3  2019-05-16  2019-05-31 15 days 3  job4  2019-05-20  2019-06-11 22 days </code></pre> <p>日期间隔已经计算出来，但后面带有一个单位 days，这是因为两个 <code>datetime</code> 类型相减，得到的数据类型是 <code>timedelta64</code>，如果只要数字，还需要使用 <code>timedelta</code> 的 <code>days</code> 属性转换一下。</p> <pre><code class="prism language-python">elapsed<span class="token operator">=</span> df<span class="token punctuation">[</span><span class="token string">'date_to'</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token builtin">apply</span><span class="token punctuation">(</span>pd<span class="token punctuation">.</span>to_datetime<span class="token punctuation">)</span> <span class="token operator">-</span>     df<span class="token punctuation">[</span><span class="token string">'date_from'</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token builtin">apply</span><span class="token punctuation">(</span>pd<span class="token punctuation">.</span>to_datetime<span class="token punctuation">)</span> df<span class="token punctuation">[</span><span class="token string">'elapsed'</span><span class="token punctuation">]</span> <span class="token operator">=</span> elapsed<span class="token punctuation">.</span><span class="token builtin">apply</span><span class="token punctuation">(</span><span class="token keyword">lambda</span> x <span class="token punctuation">:</span> x<span class="token punctuation">.</span>days<span class="token punctuation">)</span> </code></pre> <p>使用 <code>DataFrame.apply()</code> 函数也能达到同样的效果，我们需要先定义一个函数 <code>get_interval_days()</code> 函数的第一列是一个 <code>Series</code> 类型的变量，执行的时候，依次接收 DataFrame 的每一行。</p> <pre><code class="prism language-python"><span class="token keyword">import</span> pandas <span class="token keyword">as</span> pd <span class="token keyword">import</span> datetime <span class="token keyword">as</span> dt  <span class="token keyword">def</span> <span class="token function">get_interval_days</span><span class="token punctuation">(</span>arrLike<span class="token punctuation">,</span> start<span class="token punctuation">,</span> end<span class="token punctuation">)</span><span class="token punctuation">:</span>        start_date <span class="token operator">=</span> dt<span class="token punctuation">.</span>datetime<span class="token punctuation">.</span>strptime<span class="token punctuation">(</span>arrLike<span class="token punctuation">[</span>start<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">'%Y-%m-%d'</span><span class="token punctuation">)</span>     end_date <span class="token operator">=</span> dt<span class="token punctuation">.</span>datetime<span class="token punctuation">.</span>strptime<span class="token punctuation">(</span>arrLike<span class="token punctuation">[</span>end<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">'%Y-%m-%d'</span><span class="token punctuation">)</span>       <span class="token keyword">return</span> <span class="token punctuation">(</span>end_date <span class="token operator">-</span> start_date<span class="token punctuation">)</span><span class="token punctuation">.</span>days   wbs <span class="token operator">=</span> <span class="token punctuation">{<!-- --></span>     <span class="token string">"wbs"</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">"job1"</span><span class="token punctuation">,</span> <span class="token string">"job2"</span><span class="token punctuation">,</span> <span class="token string">"job3"</span><span class="token punctuation">,</span> <span class="token string">"job4"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>     <span class="token string">"date_from"</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">"2019-04-01"</span><span class="token punctuation">,</span> <span class="token string">"2019-04-07"</span><span class="token punctuation">,</span> <span class="token string">"2019-05-16"</span><span class="token punctuation">,</span><span class="token string">"2019-05-20"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>     <span class="token string">"date_to"</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">"2019-05-01"</span><span class="token punctuation">,</span> <span class="token string">"2019-05-17"</span><span class="token punctuation">,</span> <span class="token string">"2019-05-31"</span><span class="token punctuation">,</span> <span class="token string">"2019-06-11"</span><span class="token punctuation">]</span> <span class="token punctuation">}</span>  df <span class="token operator">=</span> pd<span class="token punctuation">.</span>DataFrame<span class="token punctuation">(</span>wbs<span class="token punctuation">)</span> df<span class="token punctuation">[</span><span class="token string">'elapsed'</span><span class="token punctuation">]</span> <span class="token operator">=</span> df<span class="token punctuation">.</span><span class="token builtin">apply</span><span class="token punctuation">(</span>     get_interval_days<span class="token punctuation">,</span> axis<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> args<span class="token operator">=</span><span class="token punctuation">(</span><span class="token string">'date_from'</span><span class="token punctuation">,</span> <span class="token string">'date_to'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> </code></pre> <h2> <a id="_280" rel="nofollow"></a>参考</h2> <p><a href="http://www.m6000.cn/wp-content/themes/begin%20lts/inc/go.php?url=https://blog.csdn.net/qq_19528953/article/details/79348929"  rel="nofollow">Pandas的Apply函数——Pandas中最好用的函数</a><br /><a href="http://www.m6000.cn/wp-content/themes/begin%20lts/inc/go.php?url=https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.Series.apply.html"  rel="nofollow">pandas.Series.apply — pandas 1.3.1 documentation</a></p> </p></div> 			                <div class="clearfix"></div>
                <div class="col-md-12 mt-5">
                                        <p>上一个：<a href="/news/article-92613.htm">宠物猫驱虫多少钱一次喵旺清虫（喵汪清宠驱虫药）</a></p>
                                        <p>下一个：<a href="/news/article-93380.htm">超详细讲解JPA查询数据库</a></p>
                                    </div>
                                        </div>
                        <div class="col-md-3">
                            <div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">热门文章</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2"><a href="/free-nodes/2025-3-27-clash-meta-windows.htm" title="3月27日最新Free Clash Meta订阅 | 18.6M/S|2025年Shadowrocket/V2ray/SSR/Clash免费节点地址链接分享">3月27日最新Free Clash Meta订阅 | 18.6M/S|2025年Shadowrocket/V2ray/SSR/Clash免费节点地址链接分享</a></li>
                        <li class="py-2"><a href="/news/article-67691.htm" title="重庆宠物领养微信群号（重庆宠物领养微信群号是什么）">重庆宠物领养微信群号（重庆宠物领养微信群号是什么）</a></li>
                        <li class="py-2"><a href="/news/article-85345.htm" title="UVM如何处理out-of-order乱序传输">UVM如何处理out-of-order乱序传输</a></li>
                        <li class="py-2"><a href="/news/article-65805.htm" title="淘宝店铺转让交易平台有哪些（淘宝网店转让交易平台）">淘宝店铺转让交易平台有哪些（淘宝网店转让交易平台）</a></li>
                        <li class="py-2"><a href="/free-nodes/2025-4-5-clash-meta-node-github.htm" title="4月5日最新Free Clash Meta订阅 | 19.9M/S|2025年SSR/V2ray/Shadowrocket/Clash免费节点地址链接分享">4月5日最新Free Clash Meta订阅 | 19.9M/S|2025年SSR/V2ray/Shadowrocket/Clash免费节点地址链接分享</a></li>
                        <li class="py-2"><a href="/free-nodes/2025-3-11-clash-meta-node-github.htm" title="3月11日最新Free Clash Meta订阅 | 18.7M/S|2025年SSR/Shadowrocket/V2ray/Clash免费节点地址链接分享">3月11日最新Free Clash Meta订阅 | 18.7M/S|2025年SSR/Shadowrocket/V2ray/Clash免费节点地址链接分享</a></li>
                        <li class="py-2"><a href="/news/article-72938.htm" title="护士证可以自考吗怎么考（护士证可以自考吗怎么考天津）">护士证可以自考吗怎么考（护士证可以自考吗怎么考天津）</a></li>
                        <li class="py-2"><a href="/news/article-79721.htm" title="SpringCloud之Feign使用和拓展">SpringCloud之Feign使用和拓展</a></li>
                        <li class="py-2"><a href="/news/article-86058.htm" title="动物疫苗属于生物农业吗 动物疫苗属于生物农业吗为什么">动物疫苗属于生物农业吗 动物疫苗属于生物农业吗为什么</a></li>
                        <li class="py-2"><a href="/news/article-67077.htm" title="petite-vue源码剖析-沙箱模型">petite-vue源码剖析-沙箱模型</a></li>
                    </ul>
    </div>
</div>

<div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">归纳</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">33</span> <a href="/date/2025-04/" title="2025-04 归档">2025-04</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">90</span> <a href="/date/2025-03/" title="2025-03 归档">2025-03</a></h4>
            </li>
                    </ul>
    </div>
</div>

                        </div>
                    </div>
                </div>
            </section>
        </div>
        <!-- content close -->
                <!-- footer begin -->
        <footer class="footer-light">
            <div class="subfooter relative z-1000">
                <div class="container">
                    <div class="row">
                        <div class="col-md-12">
                                                <p>
                                                <a href="/">首页</a> |
                                                <a href="/free-nodes/">免费节点</a> |
                                                <a href="/paid-subscribe/">推荐机场</a> |
                                                <a href="/client.htm">客户端</a> |
                                                <a href="/news/">新闻资讯</a> |
                                                <a href="/about-us.htm">关于我们</a> |
                        <a href="/disclaimer.htm">免责申明</a> |
                        <a href="/privacy.htm">隐私申明</a> |
                        <a href="/sitemap.xml">网站地图</a>
                    </p>
                            <p>
                                <a href="/">Free Clash Meta免费节点机场官网</a> 版权所有 Powered by WordPress
                            </p>
                        </div>
                    </div>
                </div>
            </div>
        </footer>
        <!-- footer close -->
        <!-- Javascript Files
                    ================================================== -->
        <script src="/assets/website/js/frontend/free_clash_meta/plugins.js"></script>
        <script src="/assets/website/js/frontend/free_clash_meta/designesia.js"></script>
        <script src="/assets/website/js/frontend/free_clash_meta/swiper.js"></script>
        <script src="/assets/website/js/frontend/free_clash_meta/custom-marquee.js"></script>
        <script src="/assets/website/js/frontend/free_clash_meta/custom-swiper-1.js"></script>
        <script src="https://www.freeclashnode.com/assets/js/frontend/invite-url.js"></script>
        <script src="/assets/website/js/frontend/G.js"></script>
    </div>
</body>

</html>