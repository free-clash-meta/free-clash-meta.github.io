<!DOCTYPE html>
<html xml:lang="zh-CN" lang="zh-CN">

<head>
        <link rel="canonical" href="https://free-clash-meta.github.io/news/article-67075.htm" />
    <title>一、重写了equals为什么还要重写hashcode</title>
        <meta name="description" content="一、为什么重写了equals要重写hashcode? 有这么一个场景，当用户登录时，来了两个user，有name和age,并且还有手机号，手机号相同的我认为是一个用户。那么我们很容易得到以下代码: i" />
        <link rel="icon" href="/assets/website/img/free_clash_meta/favicon.ico" type="image/x-icon"/>
    <meta content="text/html;charset=utf-8" http-equiv="Content-Type">
    <meta content="width=device-width, initial-scale=1.0" name="viewport">

    <meta name="author" content="Free Clash Meta免费节点机场官网">
    <meta property="og:type" content="article" />
    <meta property="og:url" content="https://free-clash-meta.github.io/news/article-67075.htm" />
    <meta property="og:site_name" content="Free Clash Meta免费节点机场官网" />
    <meta property="og:title" content="一、重写了equals为什么还要重写hashcode" />
    <meta property="og:image" content="https://free-clash-meta.github.io/uploads/20250201-2/bced3fd052bf3f51db918b6ef3fc1145.webp" />
        <meta property="og:release_date" content="2025-03-04T10:14:25" />
    <meta property="og:updated_time" content="2025-03-04T10:14:25" />
        <meta property="og:description" content="一、为什么重写了equals要重写hashcode? 有这么一个场景，当用户登录时，来了两个user，有name和age,并且还有手机号，手机号相同的我认为是一个用户。那么我们很容易得到以下代码: i" />
    
    <meta name="applicable-device" content="pc,mobile" />
    <meta name="renderer" content="webkit" />
    <meta name="force-rendering" content="webkit" />
    <meta http-equiv="Cache-Control" content="no-transform" />
    <meta name="robots" content="max-image-preview:large" />
    <meta name="apple-mobile-web-app-capable" content="yes">
    <meta name="apple-mobile-web-app-status-bar-style" content="black">
    <meta name="apple-mobile-web-app-title" content="一、重写了equals为什么还要重写hashcode">
    <meta name="format-detection" content="telephone=no">

    <link rel="dns-prefetch" href="https:/www.googletagmanager.com">
    <link rel="dns-prefetch" href="https://www.googleadservices.com">
    <link rel="dns-prefetch" href="https://www.google-analytics.com">
    <link rel="dns-prefetch" href="https://pagead2.googlesyndication.com">
    <link rel="dns-prefetch" href="https://cm.g.doubleclick.net">

    <!-- CSS Files
    ================================================== -->
    <link href="/assets/website/css/free_clash_meta/bootstrap.min.css" rel="stylesheet" type="text/css" id="bootstrap">
    <link href="/assets/website/css/free_clash_meta/plugins.css" rel="stylesheet" type="text/css">
    <link href="/assets/website/css/free_clash_meta/swiper.css" rel="stylesheet" type="text/css">
    <link href="/assets/website/css/free_clash_meta/style.css" rel="stylesheet" type="text/css">
    <link href="/assets/website/css/free_clash_meta/coloring.css" rel="stylesheet" type="text/css">
    <!-- color scheme -->
    <link id="colors" href="/assets/website/css/free_clash_meta/scheme-01.css" rel="stylesheet" type="text/css">
    <!-- Google tag (gtag.js) -->
<script async src="https://www.googletagmanager.com/gtag/js?id=G-8MB0F69N3T"></script>
<script>
  window.dataLayer = window.dataLayer || [];
  function gtag(){dataLayer.push(arguments);}
  gtag('js', new Date());

  gtag('config', 'G-8MB0F69N3T');
</script>
    <script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-3332997411212854"
     crossorigin="anonymous"></script>
    
</head>

<body data-page="detail">
    <div id="wrapper">
                <!-- page preloader begin -->
        <div id="de-loader"></div>
        <!-- page preloader close -->
        <!-- header begin -->
        <header class="transparent header-light has-topbar">
            <div class="container">
                <div class="row">
                    <div class="col-md-12">
                        <div class="de-flex sm-pt10">
                            <div class="de-flex-col">
                                <!-- logo begin -->
                                <div id="logo">
                                    <a href="/" class="xcblog-blog-logo">
                                                                                <span class="text-primary m-0">Free Clash Meta</span>
                                                                            </a>
                                </div>
                                <!-- logo close -->
                            </div>
                            <div class="de-flex-col header-col-mid">
                                <ul id="mainmenu">
                                                                        <li><a class="menu-item" href="/">首页</a></li>
                                                                        <li><a class="menu-item" href="/free-nodes/">免费节点</a></li>
                                                                        <li><a class="menu-item" href="/paid-subscribe/">推荐机场</a></li>
                                                                        <li><a class="menu-item" href="/client.htm">客户端</a></li>
                                                                        <li><a class="menu-item" href="/news/">新闻资讯</a></li>
                                                                    </ul>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </header>
        <!-- header close -->
        <!-- content begin -->
        <div id="content" class="no-top no-bottom">
            <div id="top"></div>
            <!-- section begin -->
            <section id="de-subheader" class="mt-sm-60 pt20 pb20 bg-gradient-45-deg text-light">
                <div class="container relative z-index-1000">
                    <div class="row align-items-center">
                        <div class="col-lg-6">
                            <h1 class="mb-0" style="font-size: 2.5rem;">一、重写了equals为什么还要重写hashcode</h1>
                        </div>
                        <div class="col-lg-6 text-lg-end">
                            <ul class="crumb">
                                <li><a href="/">首页</a></li>
                                <li><a href="/news/">新闻资讯</a></li>
                                <li class="active">正文</li>
                            </ul>
                        </div>
                    </div>
                </div>
            </section>
            <!-- section close -->
            <section>
                <div class="container relative">
                    <div class="row">
                        <div class="col-md-9">
                                            <input type="hidden" id="share-website-info" data-name="Clash Meta免费节点订阅站" data-url="https://clash-meta.github.io">
                  				  				  				<div id="content_views" class="markdown_views prism-atom-one-dark"> <p>一、为什么重写了equals要重写hashcode?</p> <p>有这么一个场景，当用户登录时，来了两个user，有name和age,并且还有手机号，手机号相同的我认为是一个用户。那么我们很容易得到以下代码:</p> <pre><code class="prism language-java"><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">HashMap</span><span class="token punctuation">;</span> <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MockLogin</span> <span class="token punctuation">{<!-- --></span>     <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token punctuation">{<!-- --></span>         <span class="token keyword">public</span> <span class="token keyword">int</span> age<span class="token punctuation">;</span>         <span class="token keyword">public</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>         <span class="token keyword">public</span> <span class="token class-name">String</span> mobile<span class="token punctuation">;</span>          <span class="token keyword">public</span> <span class="token class-name">User</span><span class="token punctuation">(</span> <span class="token class-name">String</span> mobile<span class="token punctuation">,</span><span class="token keyword">int</span> age<span class="token punctuation">,</span> <span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span>             <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>             <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>             <span class="token keyword">this</span><span class="token punctuation">.</span>mobile <span class="token operator">=</span> mobile<span class="token punctuation">;</span>         <span class="token punctuation">}</span>     <span class="token punctuation">}</span>      <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span>         <span class="token comment">//小灰灰登录</span>         <span class="token class-name">User</span> xhhFirstLogin <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token string">"123456"</span><span class="token punctuation">,</span><span class="token number">21</span><span class="token punctuation">,</span> <span class="token string">"xiaohuihui"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment">//这里我想记录小灰灰是否登陆过</span>         <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">,</span><span class="token class-name">Boolean</span><span class="token punctuation">&gt;</span></span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>xhhFirstLogin<span class="token punctuation">,</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token comment">//小灰灰第二次登陆来了，如果登陆过，我就把之前登陆信息给他，不再次登陆</span>         <span class="token class-name">User</span> xhhSecondLogin <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token string">"123456"</span><span class="token punctuation">,</span><span class="token number">21</span><span class="token punctuation">,</span> <span class="token string">"xiaohuihui"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token keyword">boolean</span> b <span class="token operator">=</span> map<span class="token punctuation">.</span><span class="token function">containsKey</span><span class="token punctuation">(</span>xhhSecondLogin<span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment">//看是否登陆过</span>         <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>b<span class="token operator">?</span><span class="token string">"登陆过"</span><span class="token operator">:</span><span class="token string">"没有登录"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span> <span class="token punctuation">}</span> </code></pre> <p>但实际运行结果是:</p> <pre><code class="prism language-java">没有登录 </code></pre> <p>聪明的你一定看出来了，你没有重写equals啊，怎么判断手机号相等是同一个对象，好，那我们重写一下equals:</p> <pre><code class="prism language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MockLogin</span> <span class="token punctuation">{<!-- --></span>     <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token punctuation">{<!-- --></span>         <span class="token keyword">public</span> <span class="token keyword">int</span> age<span class="token punctuation">;</span>         <span class="token keyword">public</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>         <span class="token keyword">public</span> <span class="token class-name">String</span> mobile<span class="token punctuation">;</span>          <span class="token keyword">public</span> <span class="token class-name">User</span><span class="token punctuation">(</span> <span class="token class-name">String</span> mobile<span class="token punctuation">,</span><span class="token keyword">int</span> age<span class="token punctuation">,</span> <span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span>             <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>             <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>             <span class="token keyword">this</span><span class="token punctuation">.</span>mobile <span class="token operator">=</span> mobile<span class="token punctuation">;</span>         <span class="token punctuation">}</span>          <span class="token annotation punctuation">@Override</span>         <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">equals</span><span class="token punctuation">(</span><span class="token class-name">Object</span> o<span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span>             <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span> <span class="token operator">==</span> o<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>             <span class="token keyword">if</span> <span class="token punctuation">(</span>o <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> <span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> o<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>             <span class="token class-name">User</span> user <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">User</span><span class="token punctuation">)</span> o<span class="token punctuation">;</span>             <span class="token keyword">return</span> <span class="token class-name">Objects</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>mobile<span class="token punctuation">,</span> user<span class="token punctuation">.</span>mobile<span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token punctuation">}</span>     <span class="token punctuation">}</span>      <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span>         <span class="token comment">//小灰灰登录</span>         <span class="token class-name">User</span> xhhFirstLogin <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token string">"123456"</span><span class="token punctuation">,</span><span class="token number">21</span><span class="token punctuation">,</span> <span class="token string">"xiaohuihui"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment">//这里我想记录小灰灰是否登陆过</span>         <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">,</span><span class="token class-name">Boolean</span><span class="token punctuation">&gt;</span></span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>xhhFirstLogin<span class="token punctuation">,</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token comment">//小灰灰第二次登陆来了，如果登陆过，我就把之前登陆信息给他，不再次登陆</span>         <span class="token class-name">User</span> xhhSecondLogin <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token string">"123456"</span><span class="token punctuation">,</span><span class="token number">21</span><span class="token punctuation">,</span> <span class="token string">"xiaohuihui"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token keyword">boolean</span> b <span class="token operator">=</span> map<span class="token punctuation">.</span><span class="token function">containsKey</span><span class="token punctuation">(</span>xhhSecondLogin<span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment">//看是否登陆过</span>         <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>b<span class="token operator">?</span><span class="token string">"登陆过"</span><span class="token operator">:</span><span class="token string">"没有登录"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span> <span class="token punctuation">}</span>  </code></pre> <p>重写完之后的结果:</p> <pre><code class="prism language-java">没有登录 </code></pre> <p>还是没有登录。那么问题究竟出在哪里了呢？既然是containsKey返回的false，我们就去看看containsKey是怎么写的吧</p> <pre><code class="prism language-java">    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">containsKey</span><span class="token punctuation">(</span><span class="token class-name">Object</span> key<span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span>         <span class="token keyword">return</span> <span class="token function">getNode</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span> </code></pre> <p>接着往下找:</p> <pre><code class="prism language-java">    <span class="token comment">/**      * Implements Map.get and related methods.      *      * @param key the key      * @return the node, or null if none      */</span>     <span class="token keyword">final</span> <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> <span class="token function">getNode</span><span class="token punctuation">(</span><span class="token class-name">Object</span> key<span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span>         <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">[</span><span class="token punctuation">]</span> tab<span class="token punctuation">;</span> <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> first<span class="token punctuation">,</span> e<span class="token punctuation">;</span> <span class="token keyword">int</span> n<span class="token punctuation">,</span> hash<span class="token punctuation">;</span> <span class="token class-name">K</span> k<span class="token punctuation">;</span>         <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>tab <span class="token operator">=</span> table<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>n <span class="token operator">=</span> tab<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span>             <span class="token punctuation">(</span>first <span class="token operator">=</span> tab<span class="token punctuation">[</span><span class="token punctuation">(</span>n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token punctuation">(</span>hash <span class="token operator">=</span> <span class="token function">hash</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span>             <span class="token keyword">if</span> <span class="token punctuation">(</span>first<span class="token punctuation">.</span>hash <span class="token operator">==</span> hash <span class="token operator">&amp;&amp;</span> <span class="token comment">// always check first node</span>                 <span class="token punctuation">(</span><span class="token punctuation">(</span>k <span class="token operator">=</span> first<span class="token punctuation">.</span>key<span class="token punctuation">)</span> <span class="token operator">==</span> key <span class="token operator">||</span> <span class="token punctuation">(</span>key <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> key<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                 <span class="token keyword">return</span> first<span class="token punctuation">;</span>             <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>e <span class="token operator">=</span> first<span class="token punctuation">.</span>next<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span>                 <span class="token keyword">if</span> <span class="token punctuation">(</span>first <span class="token keyword">instanceof</span> <span class="token class-name">TreeNode</span><span class="token punctuation">)</span>                     <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">TreeNode</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">)</span>first<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getTreeNode</span><span class="token punctuation">(</span>hash<span class="token punctuation">,</span> key<span class="token punctuation">)</span><span class="token punctuation">;</span>                 <span class="token keyword">do</span> <span class="token punctuation">{<!-- --></span>                     <span class="token keyword">if</span> <span class="token punctuation">(</span>e<span class="token punctuation">.</span>hash <span class="token operator">==</span> hash <span class="token operator">&amp;&amp;</span>                         <span class="token punctuation">(</span><span class="token punctuation">(</span>k <span class="token operator">=</span> e<span class="token punctuation">.</span>key<span class="token punctuation">)</span> <span class="token operator">==</span> key <span class="token operator">||</span> <span class="token punctuation">(</span>key <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> key<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                         <span class="token keyword">return</span> e<span class="token punctuation">;</span>                 <span class="token punctuation">}</span> <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>e <span class="token operator">=</span> e<span class="token punctuation">.</span>next<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>             <span class="token punctuation">}</span>         <span class="token punctuation">}</span>         <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span> </code></pre> <p>哦吼，这么多代码，关掉你的文章，休息一下。秋冬马爹，其实这里面只有一个行我们是需要注意的：</p> <pre><code class="prism language-java">             hash <span class="token operator">=</span> <span class="token function">hash</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//根据key算出来的hash</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>first<span class="token punctuation">.</span>hash <span class="token operator">==</span> hash <span class="token operator">&amp;&amp;</span> <span class="token comment">//对比第一个节点的hash值</span>                 <span class="token punctuation">(</span><span class="token punctuation">(</span>k <span class="token operator">=</span> first<span class="token punctuation">.</span>key<span class="token punctuation">)</span> <span class="token operator">==</span> key <span class="token operator">||</span> <span class="token punctuation">(</span>key <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> key<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">//如果key和第一个节点的key相同或者(key不等于空并且相等)</span>                 <span class="token keyword">return</span> first<span class="token punctuation">;</span> </code></pre> <p>我们知道hashmap是一个拉链式的hash结构:<br /><img decoding="async" src="http://img.555519.xyz/uploads/20230205/9eab033a8b663ea4e1b7eea8926dad65.jpg" alt="一、重写了equals为什么还要重写hashcode"></p> <p>containsKey是先找到hashcode,然后再来对比是否相等的。那么我们很容易得到猜想，是不是刚才hashcode不一样，导致的containsKey返回了false。我们先来打印一下hashcode:</p> <pre><code class="prism language-java"><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token keyword">boolean</span> b <span class="token operator">=</span> map<span class="token punctuation">.</span><span class="token function">containsKey</span><span class="token punctuation">(</span>xhhSecondLogin<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"fcode = "</span><span class="token operator">+</span>xhhFirstLogin<span class="token punctuation">.</span><span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"  scode = "</span><span class="token operator">+</span>xhhSecondLogin<span class="token punctuation">.</span><span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> </code></pre> <p>看一下执行结果:</p> <pre><code class="prism language-java">fcode <span class="token operator">=</span> <span class="token number">1704856573</span>  scode <span class="token operator">=</span> <span class="token number">705927765</span> 没有登录 </code></pre> <p>果然，是hashcode导致了我们containsKey函数的失败。那我们先简单的处理一下，让他们相等：</p> <pre><code class="prism language-java">       <span class="token keyword">public</span> <span class="token class-name">User</span><span class="token punctuation">(</span> <span class="token class-name">String</span> mobile<span class="token punctuation">,</span><span class="token keyword">int</span> age<span class="token punctuation">,</span> <span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span>             <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>             <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>             <span class="token keyword">this</span><span class="token punctuation">.</span>mobile <span class="token operator">=</span> mobile<span class="token punctuation">;</span>         <span class="token punctuation">}</span>          <span class="token annotation punctuation">@Override</span>         <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">equals</span><span class="token punctuation">(</span><span class="token class-name">Object</span> o<span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span>             <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span> <span class="token operator">==</span> o<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>             <span class="token keyword">if</span> <span class="token punctuation">(</span>o <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> <span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> o<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>             <span class="token class-name">User</span> user <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">User</span><span class="token punctuation">)</span> o<span class="token punctuation">;</span>             <span class="token keyword">return</span> <span class="token class-name">Objects</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>mobile<span class="token punctuation">,</span> user<span class="token punctuation">.</span>mobile<span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token punctuation">}</span>          <span class="token annotation punctuation">@Override</span>         <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span>             <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>         <span class="token punctuation">}</span>     <span class="token punctuation">}</span> </code></pre> <p>在user类增加hashcode方法，返回固定值1,我们再跑一下运行结果:</p> <pre><code class="prism language-java">fcode <span class="token operator">=</span> <span class="token number">1</span>  scode <span class="token operator">=</span> <span class="token number">1</span> 登陆过 </code></pre> <p>这时真的相等了，当然hashcode = 1这是为了做测试，工程化落地时，我们还是用hashcode标准方法吧:</p> <pre><code class="prism language-java">        <span class="token annotation punctuation">@Override</span>         <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span>             <span class="token keyword">return</span> <span class="token class-name">Objects</span><span class="token punctuation">.</span><span class="token function">hash</span><span class="token punctuation">(</span>age<span class="token punctuation">,</span> name<span class="token punctuation">,</span> mobile<span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token punctuation">}</span> </code></pre> <p>我们认为，当他所有成员属性一样时，那就是一个对象，再次跑结果:</p> <pre><code class="prism language-java">fcode <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">679329960</span>  scode <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">679329960</span> 登陆过 </code></pre> <p>技术总结:</p> <ul> <li> <p>hashcode是一种快速定位到拉链法hash表数组位置索引的一个值,根据key算出来。</p> </li> <li> <p>hashcode重写主要是为了解决对象在hash表中当key时，equals相等，但是hashcode不相等，导致containsKey错误返回的问题</p> </li> </ul> <p>贴一下最后的源代码:</p> <pre><code class="prism language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>android</span><span class="token punctuation">;</span> <span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">HashMap</span><span class="token punctuation">;</span> <span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Objects</span><span class="token punctuation">;</span>  <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MockLogin</span> <span class="token punctuation">{<!-- --></span>     <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token punctuation">{<!-- --></span>         <span class="token keyword">public</span> <span class="token keyword">int</span> age<span class="token punctuation">;</span>         <span class="token keyword">public</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>         <span class="token keyword">public</span> <span class="token class-name">String</span> mobile<span class="token punctuation">;</span>          <span class="token keyword">public</span> <span class="token class-name">User</span><span class="token punctuation">(</span> <span class="token class-name">String</span> mobile<span class="token punctuation">,</span><span class="token keyword">int</span> age<span class="token punctuation">,</span> <span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span>             <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>             <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>             <span class="token keyword">this</span><span class="token punctuation">.</span>mobile <span class="token operator">=</span> mobile<span class="token punctuation">;</span>         <span class="token punctuation">}</span>          <span class="token annotation punctuation">@Override</span>         <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">equals</span><span class="token punctuation">(</span><span class="token class-name">Object</span> o<span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span>             <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span> <span class="token operator">==</span> o<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>             <span class="token keyword">if</span> <span class="token punctuation">(</span>o <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> <span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> o<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>             <span class="token class-name">User</span> user <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">User</span><span class="token punctuation">)</span> o<span class="token punctuation">;</span>             <span class="token keyword">return</span> <span class="token class-name">Objects</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>mobile<span class="token punctuation">,</span> user<span class="token punctuation">.</span>mobile<span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token punctuation">}</span>          <span class="token annotation punctuation">@Override</span>         <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span>             <span class="token keyword">return</span> <span class="token class-name">Objects</span><span class="token punctuation">.</span><span class="token function">hash</span><span class="token punctuation">(</span>age<span class="token punctuation">,</span> name<span class="token punctuation">,</span> mobile<span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token punctuation">}</span>     <span class="token punctuation">}</span>      <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span>         <span class="token comment">//小灰灰登录</span>         <span class="token class-name">User</span> xhhFirstLogin <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token string">"123456"</span><span class="token punctuation">,</span><span class="token number">21</span><span class="token punctuation">,</span> <span class="token string">"xiaohuihui"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment">//这里我想记录小灰灰是否登陆过</span>         <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">,</span><span class="token class-name">Boolean</span><span class="token punctuation">&gt;</span></span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>xhhFirstLogin<span class="token punctuation">,</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token comment">//小灰灰第二次登陆来了，如果登陆过，我就把之前登陆信息给他，不再次登陆</span>         <span class="token class-name">User</span> xhhSecondLogin <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token string">"123456"</span><span class="token punctuation">,</span><span class="token number">21</span><span class="token punctuation">,</span> <span class="token string">"xiaohuihui"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token keyword">boolean</span> b <span class="token operator">=</span> map<span class="token punctuation">.</span><span class="token function">containsKey</span><span class="token punctuation">(</span>xhhSecondLogin<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"fcode = "</span><span class="token operator">+</span>xhhFirstLogin<span class="token punctuation">.</span><span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"  scode = "</span><span class="token operator">+</span>xhhSecondLogin<span class="token punctuation">.</span><span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token comment">//看是否登陆过</span>         <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>b<span class="token operator">?</span><span class="token string">"登陆过"</span><span class="token operator">:</span><span class="token string">"没有登录"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span> <span class="token punctuation">}</span>  </code></pre> </p></div> 			                <div class="clearfix"></div>
                <div class="col-md-12 mt-5">
                                        <p>上一个：<a href="/news/article-66437.htm">动物疫苗生产厂家排名榜单图片 动物疫苗生产厂家排名榜单图片大全</a></p>
                                        <p>下一个：<a href="/news/article-67077.htm">petite-vue源码剖析-沙箱模型</a></p>
                                    </div>
                                        </div>
                        <div class="col-md-3">
                            <div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">热门文章</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2"><a href="/news/article-56961.htm" title="宠物领养软件缺点有哪些（宠物领养软件下载）">宠物领养软件缺点有哪些（宠物领养软件下载）</a></li>
                        <li class="py-2"><a href="/free-nodes/2025-2-5-node-share-links.htm" title="2月5日最新Free Clash Meta订阅 | 23M/S|2025年Clash/V2ray/Shadowrocket/SSR免费节点地址链接分享">2月5日最新Free Clash Meta订阅 | 23M/S|2025年Clash/V2ray/Shadowrocket/SSR免费节点地址链接分享</a></li>
                        <li class="py-2"><a href="/news/article-67077.htm" title="petite-vue源码剖析-沙箱模型">petite-vue源码剖析-沙箱模型</a></li>
                        <li class="py-2"><a href="/news/article-66437.htm" title="动物疫苗生产厂家排名榜单图片 动物疫苗生产厂家排名榜单图片大全">动物疫苗生产厂家排名榜单图片 动物疫苗生产厂家排名榜单图片大全</a></li>
                        <li class="py-2"><a href="/free-nodes/2025-2-10-clash-meta-github.htm" title="2月10日最新Free Clash Meta订阅 | 21.1M/S|2025年V2ray/Clash/Shadowrocket/SSR免费节点地址链接分享">2月10日最新Free Clash Meta订阅 | 21.1M/S|2025年V2ray/Clash/Shadowrocket/SSR免费节点地址链接分享</a></li>
                        <li class="py-2"><a href="/news/article-66436.htm" title="天津市宠物领养机构电话（天津市宠物领养中心地址）">天津市宠物领养机构电话（天津市宠物领养中心地址）</a></li>
                        <li class="py-2"><a href="/news/article-50489.htm" title="python mysql 查询(in 、 like)">python mysql 查询(in 、 like)</a></li>
                        <li class="py-2"><a href="/news/article-60388.htm" title="动物防疫站可以看病吗 动物防疫站可以看病吗现在">动物防疫站可以看病吗 动物防疫站可以看病吗现在</a></li>
                        <li class="py-2"><a href="/free-nodes/2025-3-4-clash-meta-windows.htm" title="3月4日最新Free Clash Meta订阅 | 21.9M/S|2025年SSR/Shadowrocket/Clash/V2ray免费节点地址链接分享">3月4日最新Free Clash Meta订阅 | 21.9M/S|2025年SSR/Shadowrocket/Clash/V2ray免费节点地址链接分享</a></li>
                        <li class="py-2"><a href="/free-nodes/2025-2-14-today-clash-meta-node.htm" title="2月14日最新Free Clash Meta订阅 | 20.4M/S|2025年Clash/V2ray/SSR/Shadowrocket免费节点地址链接分享">2月14日最新Free Clash Meta订阅 | 20.4M/S|2025年Clash/V2ray/SSR/Shadowrocket免费节点地址链接分享</a></li>
                    </ul>
    </div>
</div>

<div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">归纳</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">18</span> <a href="/date/2025-03/" title="2025-03 归档">2025-03</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">84</span> <a href="/date/2025-02/" title="2025-02 归档">2025-02</a></h4>
            </li>
                    </ul>
    </div>
</div>

                        </div>
                    </div>
                </div>
            </section>
        </div>
        <!-- content close -->
                <!-- footer begin -->
        <footer class="footer-light">
            <div class="subfooter relative z-1000">
                <div class="container">
                    <div class="row">
                        <div class="col-md-12">
                            <p>
                                <a href="/">首页</a> |
                                <a href="/free-node/">免费节点</a> |
                                <a href="/news/">新闻资讯</a> |
                                <a href="/about-us.htm">关于我们</a> |
                                <a href="/disclaimer.htm">免责申明</a> |
                                <a href="/privacy.htm">隐私申明</a> |
                                <a href="/sitemap.xml">网站地图</a>
                            </p>
                            <p>
                                <a href="/">Free Clash Meta免费节点机场官网</a> 版权所有 Powered by WordPress
                            </p>
                        </div>
                    </div>
                </div>
            </div>
        </footer>
        <!-- footer close -->
        <!-- Javascript Files
                    ================================================== -->
        <script src="/assets/website/js/frontend/free_clash_meta/plugins.js"></script>
        <script src="/assets/website/js/frontend/free_clash_meta/designesia.js"></script>
        <script src="/assets/website/js/frontend/free_clash_meta/swiper.js"></script>
        <script src="/assets/website/js/frontend/free_clash_meta/custom-marquee.js"></script>
        <script src="/assets/website/js/frontend/free_clash_meta/custom-swiper-1.js"></script>
        <script src="https://www.freeclashnode.com/assets/js/frontend/invite-url.js"></script>
        <script src="/assets/website/js/frontend/G.js"></script>
    </div>
</body>

</html>